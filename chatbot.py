# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kCMOXVF3zCUY_xq5j6L6iZywBf0Ij0EV

---

# GPT Language Model for Text Generation in PyTorch

The below code demonstrates how to implement and use a GPT-style transformer language model for text generation. The model is trained on a character-level vocabulary and generates text based on user-provided prompts.

### Key Features:

1. **Custom GPT Model**:
   - Implements a GPT-style architecture with layers for multi-head self-attention, feed-forward networks, and layer normalization.
   - Supports token and positional embeddings.

2. **Model Parameters**:
   - Vocabulary size is dynamically derived from the `vocab.txt` file.
   - Configurable parameters for embedding size (`n_embd`), number of heads (`n_head`), number of layers (`n_layer`), and dropout rate.

3. **Text Encoding and Decoding**:
   - Characters are mapped to integers for processing using encoding and decoding dictionaries.
   - Enables easy integration of character-level text data.

4. **Training and Inference**:
   - The model computes the cross-entropy loss during training.
   - Generates text during inference by predicting the next token iteratively and sampling from the probability distribution.

5. **Interactive Text Generation**:
   - Accepts a user-provided prompt.
   - Generates a completion of up to 150 new tokens based on the input.

### Steps to Use:

1. **Set Parameters**:
   - Configure the batch size dynamically through user input.
   - Model parameters such as `block_size`, `n_embd`, `n_head`, and `dropout` are predefined.

2. **Load Vocabulary**:
   - Reads `vocab.txt` to construct the character-level vocabulary and mappings.

3. **Define Model**:
   - Includes custom classes for `Head`, `MultiHeadAttention`, `FeedForward`, `Block`, and `GPTLanguageModel`.
   - Implements the transformer architecture with self-attention and feed-forward components.

4. **Load Pretrained Model**:
   - Load model parameters from a saved checkpoint (`model-01.pth`).

5. **Generate Text**:
   - Input a text prompt interactively.
   - The model generates a continuation based on the prompt.

### Outputs:
- Based on the input prompt, the model generates and prints the completed text.

### Example:
**Input Prompt**:  
`"Once upon a time"`  

**Generated Completion**:  
`"Once upon a time in a small village, there lived a kind-hearted farmer who..."`

> **Note**: Ensure the pretrained model checkpoint is available at the specified path (`/content/model-01.pth`) for successful execution.

Run the code below and interact with the model to generate creative text completions!

---
"""

import torch
import torch.nn as nn
from torch.nn import functional as F
import mmap
import random
import pickle

# Get the batch_size as input from the user
batch_size = int(input("Enter batch size: "))

# Configuration for the model and training
block_size = 128  # Maximum length of a sequence that the model can process
max_iters = 200
learning_rate = 2e-5
eval_iters = 100
n_embd = 384  # Embedding size
n_head = 4    # Number of attention heads
n_layer = 4   # Number of transformer blocks
dropout = 0.2

# Check for available device (GPU or CPU)
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f"Using device: {device}")

# Load vocabulary from file
chars = ""
with open("/content/vocab.txt", 'r', encoding='utf-8') as f:
    text = f.read()
    chars = sorted(list(set(text)))

# Create mappings for encoding and decoding
vocab_size = len(chars)
string_to_int = {ch: i for i, ch in enumerate(chars)}
int_to_string = {i: ch for i, ch in enumerate(chars)}
encode = lambda s: [string_to_int[c] for c in s]  # Encode string to integer sequence
decode = lambda l: ''.join([int_to_string[i] for i in l])  # Decode integer sequence to string

# Define self-attention head
class Head(nn.Module):
    """One head of self-attention"""
    def __init__(self, head_size):
        super().__init__()
        self.key = nn.Linear(n_embd, head_size, bias=False)
        self.query = nn.Linear(n_embd, head_size, bias=False)
        self.value = nn.Linear(n_embd, head_size, bias=False)
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))  # Lower triangular mask
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        B, T, C = x.shape
        k = self.key(x)
        q = self.query(x)
        wei = q @ k.transpose(-2, -1) * k.shape[-1]**-0.5  # Scaled dot-product attention
        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))  # Apply mask
        wei = F.softmax(wei, dim=-1)  # Convert to probabilities
        wei = self.dropout(wei)
        v = self.value(x)
        out = wei @ v  # Weighted sum of values
        return out

# Define multi-head self-attention
class MultiHeadAttention(nn.Module):
    """Multiple heads of self-attention in parallel"""
    def __init__(self, num_heads, head_size):
        super().__init__()
        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.proj = nn.Linear(head_size * num_heads, n_embd)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        out = torch.cat([h(x) for h in self.heads], dim=-1)  # Concatenate outputs of all heads
        out = self.dropout(self.proj(out))  # Project concatenated output
        return out

# Define feed-forward network
class FeedForward(nn.Module):
    """Simple feed-forward neural network"""
    def __init__(self, n_embd):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embd, 4 * n_embd),
            nn.ReLU(),
            nn.Linear(4 * n_embd, n_embd),
            nn.Dropout(dropout),
        )

    def forward(self, x):
        return self.net(x)

# Define transformer block
class Block(nn.Module):
    """Transformer block: self-attention followed by feed-forward"""
    def __init__(self, n_embd, n_head):
        super().__init__()
        head_size = n_embd // n_head
        self.sa = MultiHeadAttention(n_head, head_size)  # Self-attention
        self.ffwd = FeedForward(n_embd)  # Feed-forward network
        self.ln1 = nn.LayerNorm(n_embd)
        self.ln2 = nn.LayerNorm(n_embd)

    def forward(self, x):
        y = self.sa(x)
        x = self.ln1(x + y)  # Add & normalize
        y = self.ffwd(x)
        x = self.ln2(x + y)  # Add & normalize
        return x

# Define the GPT language model
class GPTLanguageModel(nn.Module):
    def __init__(self, vocab_size):
        super().__init__()
        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)  # Token embeddings
        self.position_embedding_table = nn.Embedding(block_size, n_embd)  # Positional embeddings
        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])  # Transformer blocks
        self.ln_f = nn.LayerNorm(n_embd)
        self.lm_head = nn.Linear(n_embd, vocab_size)  # Output layer for logits

        self.apply(self._init_weights)

    def _init_weights(self, module):
        """Initialize model weights"""
        if isinstance(module, nn.Linear):
            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)
            if module.bias is not None:
                torch.nn.init.zeros_(module.bias)
        elif isinstance(module, nn.Embedding):
            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)

    def forward(self, index, targets=None):
        """Forward pass through the model"""
        B, T = index.shape
        tok_emb = self.token_embedding_table(index)  # Token embeddings
        pos_emb = self.position_embedding_table(torch.arange(T, device=device))  # Positional embeddings
        x = tok_emb + pos_emb
        x = self.blocks(x)  # Pass through transformer blocks
        x = self.ln_f(x)
        logits = self.lm_head(x)

        # Compute loss if targets are provided
        if targets is None:
            loss = None
        else:
            B, T, C = logits.shape
            logits = logits.view(B * T, C)
            targets = targets.view(B * T)
            loss = F.cross_entropy(logits, targets)

        return logits, loss

    def generate(self, index, max_new_tokens):
        """Generate new tokens based on input sequence"""
        for _ in range(max_new_tokens):
            index_cond = index[:, -block_size:]  # Focus on the last block_size tokens
            logits, _ = self.forward(index_cond)
            logits = logits[:, -1, :]  # Focus on the last time step
            probs = F.softmax(logits, dim=-1)  # Convert logits to probabilities
            index_next = torch.multinomial(probs, num_samples=1)  # Sample next token
            index = torch.cat((index, index_next), dim=1)  # Append to sequence
        return index

# Load pretrained model
model = GPTLanguageModel(vocab_size)
print('Loading model parameters...')
model.load_state_dict(torch.load("/content/model-01.pth", map_location=torch.device('cpu')))
print('Model loaded successfully!')
m = model.to(device)

# Interactive text generation
while True:
    prompt = input("Prompt:\n")
    context = torch.tensor(encode(prompt), dtype=torch.long, device=device)
    generated_chars = decode(m.generate(context.unsqueeze(0), max_new_tokens=150)[0].tolist())
    print(f'Completion:\n{generated_chars}')



